<?php

/**
 * @file
 * TFA Basic module.
 */

/**
 * Implements hook_perm().
 */
function tfa_basic_perm() {
  return array(
    // Bypass forced TFA setup
    // Enable this permission to allow a user who has not setup TFA to still log
    // in.
    'bypass tfa setup',
    // Set up TFA for account.
    // Allow users to set up TFA for their account. Users with
    // "administer users" permission can edit other account's TFA.
    'setup own tfa',
  );
}

/**
 * Implements hook_library().
 */
function tfa_basic_library() {
  $items = array();

  $items['qrcodejs'] = array(
    'title' => 'QRCode.js',
    'website' => 'https://github.com/davidshimjs/qrcodejs',
    'version' => '1.0',
    'js' => array(
      drupal_get_path('module', 'tfa_basic') . '/includes/qrcodejs/qrcode.min.js' => array(),
    ),
  );

  return $items;
}

/**
 * Implements hook_menu().
 */
function tfa_basic_menu() {
  $items = array();

  $items['user/%user/security/tfa'] = array(
    'title' => 'Security',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tfa_basic_overview', 1),
    'access callback' => 'tfa_basic_setup_access',
    'access arguments' => array(1, 'setup own tfa'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'tfa_basic.pages.inc',
  );

  $items['user/%user/security/tfa/disable'] = array(
    'title' => 'TFA disable',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tfa_basic_disable_form', 1),
    'access callback' => 'tfa_basic_setup_access',
    'access arguments' => array(1, 'setup own tfa'),
    'type' => MENU_CALLBACK,
    'file' => 'tfa_basic.pages.inc',
  );

  $items['user/%user/security/tfa/app-setup'] = array(
    'title' => 'TFA setup',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tfa_basic_setup_form', 1, 'app_setup'),
    'access callback' => 'tfa_basic_setup_access',
    'access arguments' => array(1, 'setup own tfa'),
    'type' => MENU_CALLBACK,
    'file' => 'tfa_basic.pages.inc',
  );

  $items['user/%user/security/tfa/trusted-browsers'] = array(
    'title' => 'TFA setup',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tfa_basic_setup_form', 1, 'trust_device'),
    'access callback' => 'tfa_basic_setup_access',
    'access arguments' => array(1, 'setup own tfa'),
    'type' => MENU_CALLBACK,
    'file' => 'tfa_basic.pages.inc',
  );

  $items['user/%user/security/tfa/recovery-codes'] = array(
    'title' => 'TFA setup',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tfa_basic_setup_form', 1, 'recovery_codes'),
    'access callback' => 'tfa_basic_setup_access',
    'access arguments' => array(1, 'setup own tfa'),
    'type' => MENU_CALLBACK,
    'file' => 'tfa_basic.pages.inc',
  );

  $items['user/%user/security/tfa/recovery-codes-list'] = array(
    'title' => 'TFA - Unused recovery codes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tfa_basic_setup_form', 1, 'recovery_codes_list'),
    'access callback' => 'tfa_basic_setup_access',
    'access arguments' => array(1, 'setup own tfa'),
    'type' => MENU_CALLBACK,
    'file' => 'tfa_basic.pages.inc',
  );

  $items['user/%user/security/tfa/sms-setup'] = array(
    'title' => 'TFA setup',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tfa_basic_setup_form', 1, 'sms_setup'),
    'access callback' => 'tfa_basic_setup_access',
    'access arguments' => array(1, 'setup own tfa'),
    'type' => MENU_CALLBACK,
    'file' => 'tfa_basic.pages.inc',
  );

  return $items;
}

/**
 * Access control.
 *
 * @param object $account
 * @param string $permission
 *
 * @return bool
 */
function tfa_basic_setup_access($account, $permission = '') {
  $administer_users = user_access('administer users') && $account->uid > 0;
  $is_account = ($GLOBALS['user']->uid == $account->uid);

  // @todo What if the TFA is disabled?
  return ($is_account && user_access($permission, $account)) || $administer_users;
}

/**
 * Implements hook_cron().
 */
function tfa_basic_cron() {
  // Delete trusted device entries older than expiration.
  $expiration = variable_get('tfa_basic_trust_cookie_expiration', 3600 * 24 * 30);

  $request_time = time();
  db_query('DELETE FROM {tfa_trusted_device} WHERE created < %d', $request_time - $expiration);
  $num_deleted = db_affected_rows();

  if ($num_deleted) {
    watchdog(
      'tfa_basic',
      'Removed !num TFA trusted browsers older than !time',
      array(
        '!num' => $num_deleted,
        '!time' => $request_time - $expiration,
      ),
      WATCHDOG_INFO
    );
  }
}

/**
 * Implements hook_tfa_api().
 */
function tfa_basic_tfa_api() {
  return array(
    'tfa_basic_totp' => array(
      'class' => 'TfaTotp',
      'name' => 'TOTP',
    ),
    'tfa_basic_trusted_device' => array(
      'class' => 'TfaTrustedDevice',
      'name' => 'Trusted Browsers',
    ),
    'tfa_basic_recovery_code' => array(
      'class' => 'TfaBasicRecoveryCode',
      'name' => 'Recovery Codes',
    ),
    'tfa_basic_sms' => array(
      'class' => 'TfaBasicSms',
      'name' => 'Twilio SMS',
    ),
    'tfa_basic_help' => array(
      'class' => 'TfaBasicHelp',
      'name' => 'Help page',
    ),
  );
}

/**
 * Create TfaTotp plugin.
 *
 * @param array $context
 *
 * @return TfaTotp
 */
function tfa_basic_totp_create($context) {
  return new TfaTotp($context);
}

/**
 * Create TfaTrustedDevice plugin.
 *
 * @param array $context
 *
 * @return TfaTrustedDevice
 */
function tfa_basic_trusted_device_create($context) {
  return new TfaTrustedDevice($context);
}

/**
 * Create TfaBasicRecoveryCode plugin.
 *
 * @param array $context
 *
 * @return TfaBasicRecoveryCode
 */
function tfa_basic_recovery_code_create($context) {
  return new TfaBasicRecoveryCode($context);
}

/**
 * Create TfaBasicSms plugin.
 *
 * @param array $context
 *
 * @return TfaBasicSms
 */
function tfa_basic_sms_create($context) {
  $account = user_load($context['uid']);
  $number = tfa_basic_get_mobile_number($account);

  return new TfaBasicSms($context, $number);
}

/**
 * Alters tfa_context array to set plugins from user settings.
 */
function tfa_basic_tfa_context_alter(&$context) {
  // $context can be empty during beginning of TFA process.
  if (empty($context)) {
    return;
  }

  $account = user_load($context['uid']);
  $tfa_data = tfa_basic_get_tfa_data($account);
  if (empty($tfa_data['status']) || empty($tfa_data['data']['primary'])) {
    return;
  }

  // Remove SMS plugin if enabled and mobile number is not available.
  $number = tfa_basic_get_mobile_number($account);
  if (in_array('tfa_basic_sms', variable_get('tfa_fallback_plugins', array()))
    && (empty($tfa_data['data']['sms']) || !$number)
  ) {
    foreach (array_keys($context['plugins']['fallback']) as $key) {
      if ($context['plugins']['fallback'][$key] == 'tfa_basic_sms') {
        unset($context['plugins']['fallback'][$key]);
      }
    }
  }
}

/**
 * Implements hook_tfa_require().
 */
function tfa_basic_tfa_require($account) {
  if (user_access('bypass tfa setup', $account)) {
    return FALSE;
  }
  drupal_set_message(t('Login disallowed. You are required to set up two-factor authentication. Please contact a site administrator.'), 'error');
  return TRUE;
}

/**
 * Get mobile number for an account.
 *
 * @param object $account
 *   User account object.
 *
 * @return string|FALSE
 *   Mobile phone number or FALSE if not set.
 */
function tfa_basic_get_mobile_number($account) {
  $data = tfa_basic_get_tfa_data($account);
  $alterable = array(
    'account' => $account,
    'number' => (isset($data['data']['number']) ? $data['data']['number'] : FALSE),
  );

  // Allow other modules to supply the mobile number for this account.
  drupal_alter('tfa_basic_get_mobile_number', $alterable);

  return $alterable['number'];
}

/**
 * Update mobile number on account.
 *
 * @param object $account
 *
 * @param string $number
 */
function tfa_basic_set_mobile_number($account, $number) {
  $alterable = array(
    'account' => $account,
    'number' => $number,
  );

  // Allow other modules to set the mobile number for this account.
  drupal_alter('tfa_basic_set_mobile_number', $alterable);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tfa_basic_form_tfa_form_alter(&$form, &$form_state) {
  // Add validation handler for fallback awareness.
  $form['#validate'][] = '_tfa_basic_form_validate';
}

/**
 * Validation handler to encourage use of fallback if there are form errors.
 */
function _tfa_basic_form_validate($form, &$form_state) {
  $errors = form_get_errors();
  if (!empty($errors) && !empty($form_state['values']['code']) && isset($form['actions']['fallback'])) {
    drupal_set_message(t('If you are having trouble click "Can\'t access your account?" for further authentication options.'), 'warning');
  }
}

/**
 * Get TFA data for an account.
 *
 * @param object $account
 *   User account.
 *
 * @return array
 *   TFA data.
 *
 * @code
 *   array(
 *     'status' => TRUE,
 *     'data' => array(
 *       'primary' => 'app',
 *       'sms' => FALSE,
 *     ),
 *   )
 * @endcode
 */
function tfa_basic_get_tfa_data($account) {
  $result = db_query("SELECT status, saved, data FROM {tfa_user_settings} WHERE uid = %d", $account->uid);
  if (($row = db_fetch_object($result))) {
    return array(
      'status' => ($row->status == '1'),
      'saved' => $row->saved,
      'data' => ($row->data ? json_decode($row->data, TRUE) : array()),
    );
  }

  return array();
}

/**
 * Save TFA settings for an account.
 *
 * @param object $account
 * @param array $data TFA data
 *
 * @code
 *   array(
 *     'method' => 'app',
 *     'sms' => FALSE,
 *     'status' => TRUE,
 *   )
 * @endcode
 */
function tfa_basic_setup_save_data($account, $data) {
  // Check if existing data and update.
  $existing = tfa_basic_get_tfa_data($account);
  if (!empty($existing['data'])) {
    $tfa_data = $existing['data'];
  }
  else {
    $tfa_data = array(
      'primary' => '',
      'sms' => FALSE,
    );
  }

  if (isset($data['method'])) {
    $tfa_data['primary'] = $data['method'];
  }

  if (isset($data['sms'])) {
    $tfa_data['sms'] = $data['sms'];
  }

  $status = 1;
  if (isset($data['status']) && $data['status'] === FALSE) {
    $tfa_data = array();
    $status = 0;
  }

  if (isset($data['number'])) {
    $tfa_data['number'] = $data['number'];
  }

  $record = array(
    'uid' => $account->uid,
    'saved' => time(),
    'status' => $status,
    'data' => json_encode($tfa_data),
  );

  if (!empty($existing)) {
    drupal_write_record('tfa_user_settings', $record, 'uid');
  }
  else {
    drupal_write_record('tfa_user_settings', $record);
  }
}

/**
 * Validate phone number for use in TFA SMS plugin.
 *
 * @param string $number
 *   Number.
 *
 * @return array()
 *   Array of error messages if the number is not valid, empty array otherwise.
 */
function tfa_basic_valid_number($number) {
  $alterable = array(
    // Strip leading '1' if set.
    'number' => (strpos($number, '1') === 0 ? ltrim($number) : $number),
    'errors' => array(),
  );

  // Validate against North American Numbering Plan (NANP) regex.
  // http://en.wikipedia.org/wiki/North_American_Numbering_Plan#Numbering_system
  $pattern = '~^\(?([2-9][0-9]{2})\)?[-. ]?([2-9](?!11)[0-9]{2})[-. ]?([0-9]{4})$~';
  if (!preg_match($pattern, $number)) {
    $alterable['errors']['tfa_basic_nanp'] = t('Number does not match expected patterns.');
  }

  drupal_alter('tfa_basic_valid_number', $errors);

  return $alterable['errors'];
}

/**
 * Format a mobile number.
 *
 * @param string $number
 *   Phone number.
 *
 * @return string
 *   Formatted number.
 */
function tfa_basic_format_number($number) {
  $number = str_replace(array('-', ' ', '(', ')'), '', $number);
  $formatted = $number;
  if (ctype_digit($number) && strlen($number) == 11) {
    $formatted = 'x-xxx-xxx-' . substr($number, 7);
  }
  elseif (ctype_digit($number) && strlen($number) == 10) {
    $formatted = 'xxx-xxx-' . substr($number, 6);
  }
  elseif (ctype_digit($number) && strlen($number) == 7) {
    $formatted = 'xxx-' . substr($number, 3, 4);
  }

  $alterable = array(
    'number' => $number,
    'formatted' => $formatted,
  );
  drupal_alter('tfa_basic_format_number', $alterable);

  return $alterable['formatted'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tfa_basic_form_tfa_admin_settings_alter(&$form, &$form_state) {
  global $cookie_domain;

  $path = drupal_get_path('module', 'tfa_basic');
  drupal_add_js("$path/js/tfa_basic.admin_settings.js");

  // Disallow recovery codes and SMS from being used as default validation.
  unset($form['tfa_options']['tfa_validate']['#options']['tfa_basic_recovery_code']);
  unset($form['tfa_options']['tfa_validate']['#options']['tfa_basic_sms']);
  unset($form['tfa_options']['tfa_validate']['#options']['tfa_basic_help']);

  // Add cookie domain field to TFA admin settings.
  $form['tfa_options']['tfa_basic_cookie_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Cookie domain'),
    '#default_value' => variable_get('tfa_basic_cookie_domain', $cookie_domain),
    '#description' => t('Domain to set for the trusted browser TFA cookie.'),
  );

  // Add Twilio configuration if SMS plugin is enabled.
  if (class_exists('Services_Twilio') && isset($form['tfa_options']['tfa_fallback']['tfa_basic_sms'])) {
    $form['tfa_options']['settings']['tfa_basic_sms'] = array(
      '#prefix' => '<div class="tfa-options-settings-plugin tfa-options-settings-plugin-tfa_basic_sms">',
      '#suffix' => '</div>',
      'tfa_basic_twilio_account_sid' => array(
        '#type' => 'textfield',
        '#title' => t('Twilio account SID'),
        '#default_value' => variable_get('tfa_basic_twilio_account_sid', ''),
        '#description' => t('Twilio account SID from twilio.com.'),
      ),
      'tfa_basic_twilio_account_token' => array(
        '#type' => 'textfield',
        '#title' => t('Twilio account token'),
        '#default_value' => variable_get('tfa_basic_twilio_account_token', ''),
        '#description' => t('Private Twilio account token from twilio.com.'),
      ),
      'tfa_basic_twilio_account_number' => array(
        '#type' => 'textfield',
        '#title' => t('Twilio account number'),
        '#default_value' => variable_get('tfa_basic_twilio_account_number', ''),
        '#description' => t('Private Twilio account number from twilio.com.'),
      ),
      'tfa_basic_twilio_message_text' => array(
        '#type' => 'textfield',
        '#title' => t('Twilio message text'),
        '#default_value' => variable_get('tfa_basic_twilio_message_text', 'Login code: !code'),
        '#description' => t('Text to be sent to the user. Use !code for the verification code.'),
      ),
    );
  }
  else {
    $form['tfa_options']['tfa_fallback']['tfa_basic_sms']['enable']['#disabled'] = TRUE;
    $form['tfa_options']['tfa_fallback']['tfa_basic_sms']['enable']['#description'] = t('Not available for use because Twilio PHP library is not installed. See TFA Basic README.txt.');
  }

  if (isset($form['tfa_options']['tfa_fallback']['tfa_basic_help'])) {
    // @todo Why the default value set to 10?
    // @todo What if hundreds of plugins are available?
    $form['tfa_options']['tfa_fallback']['tfa_basic_help']['weight']['#default_value'] = 10;
    $form['tfa_options']['tfa_fallback']['tfa_basic_help']['weight']['#disabled'] = TRUE;

    $default_help = t('Contact support to reset your access');
    $form['tfa_options']['settings']['tfa_basic_help'] = array(
      '#prefix' => '<div class="tfa-options-settings-plugin tfa-options-settings-plugin-tfa_basic_help">',
      '#suffix' => '</div>',
      'tfa_basic_help_text' => array(
        '#type' => 'textfield',
        '#title' => t('Help page text'),
        '#default_value' => variable_get('tfa_basic_help_text', $default_help),
        '#description' => t('Text to display on help page. Plain text only.'),
      ),
    );
  }

  $form['#validate'][] = 'tfa_basic_form_validate';
  $form['#submit'][] = 'tfa_basic_form_submit';
}

/**
 * Validation for TFA admin settings alter.
 */
function tfa_basic_form_validate($form, &$form_state) {
  $login = array();
  $values = $form_state['values'];
  if (!empty($values['tfa_login'])) {
    foreach ($values['tfa_login'] as $key => $enabled) {
      if ($enabled) {
        $login[] = $key;
      }
    }

    if (!empty($login) && in_array('tfa_basic_trusted_device', $login) && empty($values['tfa_basic_cookie_domain'])) {
      form_set_error('tfa_basic_cookie_domain', t('Cookie domain is required if Trusted Browser plugin is enabled.'));
    }
  }

  if (!empty($values['tfa_fallback']) && !empty($values['tfa_fallback']['tfa_basic_sms']['enable'])) {
    if (empty($values['tfa_basic_twilio_account_sid'])) {
      form_set_error('tfa_basic_twilio_account_sid', t('Account SID is required if Twilio SMS plugin is enabled.'));
    }

    if (empty($values['tfa_basic_twilio_account_token'])) {
      form_set_error('tfa_basic_twilio_account_token', t('Account token is required if Twilio SMS plugin is enabled.'));
    }

    if (empty($values['tfa_basic_twilio_account_number'])) {
      form_set_error('tfa_basic_twilio_account_number', t('Account number is required if Twilio SMS plugin is enabled.'));
    }

    if (empty($values['tfa_basic_twilio_message_text'])) {
      form_set_error('tfa_basic_twilio_message_text', t('Message text is required if Twilio SMS plugin is enabled.'));
    }
    elseif (strpos($values['tfa_basic_twilio_message_text'], '!code') === FALSE) {
      form_set_error('tfa_basic_twilio_message_text', t('Message text must include token !code.'));
    }
  }
}

/**
 * Submit for TFA admin settings alter.
 */
function tfa_basic_form_submit($form, &$form_state) {
  $names = array(
    'tfa_basic_cookie_domain',
    'tfa_basic_twilio_account_sid',
    'tfa_basic_twilio_account_token',
    'tfa_basic_twilio_account_number',
    'tfa_basic_twilio_message_text',
    'tfa_basic_help_text',
  );

  foreach ($names as $name) {
    if (!empty($form_state['values'][$name])) {
      variable_set($name, $form_state['values'][$name]);
    }
  }
}

/**
 * Implements hook_mail().
 */
function tfa_basic_mail($key, &$message, $params) {
  switch ($key) {
    case 'tfa_basic_tfa_enabled':
      $message['subject'] = t('Your @site_name account now has two-factor authentication', array('@site_name' => variable_get('site_name', 'Drupal')));
      $message['body']['body'] = tfa_basic_tfa_enabled_body($message, $params);
      break;

    case 'tfa_basic_disabled_configuration':
      $message['subject'] = t('Your @site_name account no longer has two-factor authentication', array('@site_name' => variable_get('site_name', 'Drupal')));
      $message['body']['body'] = tfa_basic_tfa_disabled_body($message, $params);
      break;

  }
}

/**
 * Returns text appropriate for an email when someone has enabled tfa.
 *
 * @param array $message
 *   The message, must include the language.
 * @param array $params
 *   Parameters from drupal_mail. Must include the account.
 *
 * @return string
 *   Message body.
 */
function tfa_basic_tfa_enabled_body($message, $params) {
  $text = t('[user],

Thanks for configuring two-factor authentication on your @site_name account!

This additional level of security will help to ensure that only you are able to log in to your account.

If you ever lose the device you configured, you should act quickly to delete its association with this account.

-- @site_name team',
    array(
      '@site_name' => variable_get('site_name', 'Drupal'),
    )
  );

  // @todo The [site-name] token (and much more) would be available if we had
  // use the token_replace_multiple() with 'global' and 'user' objects.
  return token_replace(
    $text,
    'user',
    $params['account'],
    TOKEN_PREFIX,
    TOKEN_SUFFIX,
    array(
      'language' => $message['language'],
      'sanitize' => FALSE,
      'clear' => TRUE,
    )
  );
}

/**
 * Returns text appropriate for an email when someone has disabled tfa.
 *
 * @param array $message
 *   The message, must include the language.
 * @param array $params
 *   Parameters from drupal_mail. Must include the account.
 *
 * @return string
 *   Message body.
 */
function tfa_basic_tfa_disabled_body($message, $params) {
  $text = t('[user],

Two-factor authentication has been disabled on your account.

If you did not take this action, please contact a site administrator immediately.

-- @site_name team', array('@site_name' => variable_get('site_name', 'Drupal')));

  return token_replace(
    $text,
    'user',
    $params['account'],
    TOKEN_PREFIX,
    TOKEN_SUFFIX,
    array(
      'language' => $message['language'],
      'sanitize' => FALSE,
      'clear' => TRUE,
    )
  );
}
