<?php

/**
 * @file
 * Drupal test cases for TFA basic plugins.
 */

/**
 * Tests the functionality of the TFA basic plugins.
 */
class TfaBasicTestCase extends DrupalWebTestCase {

  /**
   * @var PHPGangsta_GoogleAuthenticator
   */
  protected $ga;

  /**
   * @var array
   */
  protected $recoveryCodes;

  /**
   * @var string
   */
  protected $seed;

  /**
   * @var stdClass
   */
  protected $webUserTfa;

  /**
   * Provide information about this test scenario.
   */
  public static function getInfo() {
    return array(
      'name' => 'TFA Basic tests',
      'description' => 'Test the TFA basic plugins.',
      'group' => 'TFA',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable TFA module and the test module.
    parent::setUp('autoload', 'token', 'tfa', 'tfa_basic');

    $this->ga = new PHPGangsta_GoogleAuthenticator();
    $this->webUserTfa = $this->drupalCreateUser(array(
      'access content',
      'setup own tfa',
      'require tfa',
    ));
  }

  public function testTfaBasic() {
    // Use one test function to allow accounts to carry through testing.
    $this->_testAppAndRecoverySetup();
  }

  public function _testAppAndRecoverySetup() {
    variable_set('tfa_enabled', FALSE);

    $this->drupalLogin($this->webUserTfa);

    // Enable TFA and begin configuration.
    variable_set('tfa_enabled', TRUE);
    variable_set('tfa_validate_plugin', 'tfa_basic_totp');
    variable_set('tfa_fallback_plugins', array('tfa_basic_recovery_code'));

    $this->drupalGet('user/' . $this->webUserTfa->uid . '/security/tfa');

    $this->assertLink($this->uiStrings('setup-app'));

    // Set up application.
    $this->drupalGet('user/' . $this->webUserTfa->uid . '/security/tfa/app-setup');

    $this->assertText($this->uiStrings('password-request'));
    // Test incorrect password.
    $edit = array(
      'current_pass' => $this->randomName(),
    );
    $this->drupalPost(NULL, $edit, 'Confirm');
    $this->assertText($this->uiStrings('pass-error'));

    $edit = array(
      'current_pass' => $this->webUserTfa->pass_raw,
    );
    $this->drupalPost(NULL, $edit, 'Confirm');

    $this->assertText($this->uiStrings('app-step1'));
    $this->assertFieldById('edit-seed', '', 'Seed input appears');
    $this->assertFieldById('edit-code', '', 'Code input appears');

    // Extract and store seed to generate codes with.
    $result = $this->xpath('//input[@name="seed"]');
    if (empty($result)) {
      $this->fail('Unable to extract seed from page. Aborting test.');
      return;
    }
    $element = $result[0];
    $this->seed = (string) $element['value'];

    // Try invalid code.
    $edit = array(
      'code' => $this->randomName(),
    );
    $this->drupalPost(NULL, $edit, 'Verify and save');
    $this->assertText($this->uiStrings('invalid-code-retry'));

    // Submit valid code.
    $edit = array(
      'code' => $this->ga->getCode($this->seed),
    );
    $this->drupalPost(NULL, $edit, 'Verify and save');

    // Setup recovery codes.
    $this->assertText($this->uiStrings('set-recovery-codes'));

    // Store codes.
    $result = $this->xpath('//li');
    while (list(, $node) = each($result)) {
      $this->recoveryCodes[] = (string) $node;
    }
    $this->drupalPost(NULL, array(), 'Save');
    $this->assertText($this->uiStrings('setup-complete'));

    // Logout to test TFA app process.
    $this->drupalGet('logout');

    $edit = array(
      'name' => $this->webUserTfa->name,
      'pass' => $this->webUserTfa->pass_raw,
    );
    // Do not use drupalLogin() since it tests for actual login.
    $this->drupalPost('user/login', $edit, 'Log in');
    // Get login hash. Could user tfa_login_hash() but would require reloading
    // account.
    $url_parts = explode('/', $this->url);
    $login_hash = array_pop($url_parts);

    // Try invalid code.
    $edit = array(
      'code' => $this->randomName(),
    );
    $this->drupalPost('system/tfa/' . $this->webUserTfa->uid . '/' . $login_hash, $edit, 'Verify');
    $this->assertText($this->uiStrings('invalid-code-retry'));

    // Submit valid code.
    $edit = array(
      'code' => $this->ga->getCode($this->seed),
    );
    $this->drupalPost('system/tfa/' . $this->webUserTfa->uid . '/' . $login_hash, $edit, 'Verify');
    $this->assertText('My account');

    // Logout to test recovery code process.
    $this->drupalGet('logout');

    $edit = array(
      'name' => $this->webUserTfa->name,
      'pass' => $this->webUserTfa->pass_raw,
    );
    $this->drupalPost('user/login', $edit, 'Log in');
    $url_parts = explode('/', $this->url);
    $login_hash = array_pop($url_parts);

    // Begin fallback.
    $this->drupalPost('system/tfa/' . $this->webUserTfa->uid . '/' . $login_hash, array(), $this->uiStrings('fallback-button'));
    $this->assertText($this->uiStrings('recovery-prompt'));

    // Try invalid code.
    $edit = array(
      'recover' => $this->randomName(),
    );
    $this->drupalPost('system/tfa/' . $this->webUserTfa->uid . '/' . $login_hash, $edit, 'Verify');
    $this->assertText($this->uiStrings('invalid-recovery-code'));

    // Submit valid code.
    $edit = array(
      'recover' => array_pop($this->recoveryCodes),
    );
    $this->drupalPost('system/tfa/' . $this->webUserTfa->uid . '/' . $login_hash, $edit, 'Verify');
    $this->assertText('My account');
  }

  public function testRequired() {
    variable_set('tfa_enabled', TRUE);
    variable_set('tfa_validate_plugin', 'tfa_basic_totp');
    // New account with the require TFA permission.
    $account = $this->drupalCreateUser(array('access content'));
    $edit = array(
      'name' => $account->name,
      'pass' => $account->pass_raw,
    );
    $this->drupalPost('user/login', $edit, 'Log in');
    $this->assertNoLink('Log out', 'Not authenticated');
    $this->assertText($this->uiStrings('required'), 'Required text shows');
  }

  /**
   * TFA module user interface strings.
   *
   * @param string $id
   *
   * @return string
   */
  protected function uiStrings($id) {
    switch ($id) {
      case 'setup-app':
        return 'Set up application';

      case 'password-request':
        return 'Enter your current password to continue.';

      case 'pass-error':
        return 'Incorrect password';

      case 'app-step1':
        return 'Install authentication code application on your mobile or desktop device';

      case 'invalid-code-retry':
        return 'Invalid application code. Please try again.';

      case 'invalid-recovery-code':
        return 'Invalid recovery code.';

      case 'set-trust-skip':
        return 'Mark this browser as trusted or skip to continue and finish TFA setup';

      case 'set-recovery-codes':
        return 'Save recovery codes or skip to complete TFA setup.';

      case 'setup-complete':
        return 'TFA setup complete';

      case 'setup-trust':
        return 'Set trusted browsers';

      case 'setup-recovery':
        return 'Get recovery codes';

      case 'code-list':
        return 'View unused recovery codes';

      case 'app-desc':
        return 'Verification code is application generated and 6 digits long.';

      case 'fallback-button':
        return "Can't access your account?";

      case 'recovery-prompt':
        return 'Enter one of your recovery codes';

      case 'tfa-status-enabled':
        return 'TFA enabled';
      case 'required':
        return 'Login disallowed. You are required to set up two-factor authentication.';
    }

    return NULL;
  }
}
